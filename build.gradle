
buildscript {
    repositories {
        google()
        jcenter()
        maven {
            url "https://maven.google.com" // Google's Maven repository
        }
        mavenCentral()
        maven {
            url 'https://androidsdk.jfrog.io/artifactory/virtual-lib'
        }
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        classpath 'com.google.gms:google-services:4.3.4'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.4.1'
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.9, 0.99.99]'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.20.0"
    }
}
apply plugin: 'java-library'
apply plugin: 'java'
allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'maven-publish'
    repositories {
        google()
        maven {
            url "https://maven.google.com" // Google's Maven repository
        }
        jcenter()
        mavenCentral()
        maven {
            url "https://androidsdk.jfrog.io/artifactory/virtual-lib"
        }
    }

}


subprojects {
    project.configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.android.support'
                    && !details.requested.name.contains('multidex') ) {
                details.useVersion "27.1.0"
            }
        }
    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
artifactoryPublish.skip = true
project('CheShaoSDK') {
    clientConfig.setIncludeEnvVars(true)
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            aar(MavenPublication) {
                groupId = 'com.CheShaosdk'
                artifactId = 'sdkip172'
                version = currentVersion
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                pom.withXml {
                    def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }


        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'local-lib'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }

        defaults {
            publishArtifacts = true
            publishPom = true
            publicatons('mavenJava')
        }

    }

    resolve {
        repository {
            repoKey = 'virtual-lib'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }

}